# audit.log: mtail

# ignore other log file names
getfilename() !~ /audit\.log$/ {
    stop
}

# Shared function to be applied to log files that confirm to the splunkd logging format
#def parse_splunkd_header {
#    /^(?P<timestamp>^\d\d-\d\d-\d{4}\s\d\d:\d\d:\d\d\.\d{3}\s[+\-]\d{4})/ {
#
        # extract the timestamp to manage event delay issues elegantly and have fixed output when running tests
#        strptime($timestamp, "01-02-2006 15:04:05.000 +0000")
#        next
#    }
#}

#
# SEARCH PERFORMANCE SLI: runtime
hidden gauge search_type
hidden counter audit_count by search_type
gauge splunkd_mtail_audit_log_search_runtime by search_type,audit_count
histogram splunkd_mtail_audit_log_search_runtime_histogram buckets 0.5,2.0,8.0

#/, action=search, info=completed, .+, fully_completed_search=true, total_run_time=(?P<runtime>[\d\.]+), .+, savedsearch_name="(?P<jobname>[^"]+), .+, provenance="scheduler"/ {
#/, action=search, info=completed, .+, fully_completed_search=true, total_run_time=(?P<runtime>[\d]+\.[\d]+), .+, provenance="scheduler"/ {
/ total_run_time=(?P<runtime>[\d]+\.[\d]+), / {
#    $jobname = "" {
#        stop
#    }

    $runtime <= 0 {
        stop
    }

    $runtime >= 86400 {
        stop
    }

    # timestamp
#    @parse_splunkd_header {}

# histogram
    splunkd_mtail_audit_log_search_runtime_histogram = $runtime

# gauge
    search_type = 0 
# check if metrics are exported
     splunkd_mtail_audit_log_search_runtime[search_type][0] == 0.0 {
         audit_count[search_type] = 0
#         splunkd_mtail_audit_log_search_runtime[0][0] = -1.0
     }
    splunkd_mtail_audit_log_search_runtime[search_type][audit_count[search_type]] = $runtime
    audit_count[search_type]++
    audit_count[search_type] >= 128 {
        audit_count[search_type] = 0
    }
}

